---
- name: Reuse common code
  include_tasks: "{{ playbook_dir }}/../common/config_apply.yml"

- name: Create deployment files for certssetup and pvc
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/{{ item }}.j2"
    dest: "{{ playbook_dir }}/../../run/{{ item }}.yaml"
  with_items:
    - pvc
    - certssetup
    - cli-k8s
    - chainep

- name: Create peer org member string
  set_fact:
    orgmembers: >-
      {{ peerorgs|map('regex_replace','(.*)',"'\g<1>.member'")|list|join(',') }}

- name: Create peer channel command script
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/dochannel.j2"
    dest: "{{ fabricworkdir }}/keyfiles/dochannel.sh"
    mode: "u=rx,g=rx"
  when: (allorderers | length > 0) and (allpeers | length > 0)

- name: Create persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/pvc.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createpvc"

- name: Query PVC status
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.phase
    pvc fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Bound") >= 0
  retries: 50
  delay: 10
  tags: "querypvc"

- name: Create certs volume initialization pod
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/certssetup.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createcertspod"

- name: Query initialization container status
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.phase
    pod fabriccertspod
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Running") >= 0
  retries: 5
  delay: 10
  tags: "querypvc"

- name: Check the status of secret for pulling images
  command: >-
    ./kubectl --kubeconfig='kubeconfig' get secrets -o=custom-columns=NAME:.metadata.name
    regcred
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  ignore_errors: yes
  no_log: True
  register: "secretstatus"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0

- name: Create secret for image
  command: >-
    ./kubectl --kubeconfig kubeconfig create secret docker-registry regcred --docker-server={{ fabric.repo.url }}
    --docker-username={{ fabric.repo.username }} --docker-password={{ fabric.repo.password }} --docker-email=email@email.com
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: "secretcreate"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0 and
    secretstatus.rc != 0

- name: Clean up the Persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig exec fabriccertspod -c task-pv-container
    -- rm -rf /fabriccerts/*
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "cleancerts"

- name: Copy certs onto the persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig cp {{ item }} fabriccertspod:/fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items:
    - "{{ fabricworkdir }}/certs.tgz"
    - "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/firstcode.go"
  tags: "placecerts"

- name: Copy channel operation script onto the persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig cp {{ item }} fabriccertspod:/fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items:
    - "{{ fabricworkdir }}/keyfiles/dochannel.sh"
  when: (allorderers | length > 0) and (allpeers | length > 0)
  tags: "placecerts"

- name: Untar certs.tgz in the Persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig exec fabriccertspod -c task-pv-container
    -- tar -C /fabriccerts -xzvf /fabriccerts/certs.tgz
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "untarcerts"

- name: Change certs permissions
  command: >-
    ./kubectl --kubeconfig kubeconfig exec fabriccertspod -c task-pv-container
    -- chmod -R o+rw /fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "changecertspermission"

- name: Removing the certs pod
  command: >-
    ./kubectl --kubeconfig kubeconfig delete -f ../run/certssetup.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "deletecertspod"

- name: Deploy chaincode container endpoint daemon set
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/chainep.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "doendpointdaemonset"

- name: Create k8s deployment files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/fabric-pod.j2"
    dest: "{{ playbook_dir }}/../../vars/fabric-pod.yml"

- name: Start fabric pods
  command: "./kubectl --kubeconfig kubeconfig apply -f fabric-pod.yml"
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "fabricup"

- name: Wait for all peer pods to be ready
  command: >-
    ./kubectl --kubeconfig kubeconfig -o=custom-columns=STATUS:.status.phase
    get pods -l type=peer --no-headers --field-selector=status.phase=Running
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: podstatus.stdout_lines | length == allpeers | length
  retries: 50
  delay: 5

- name: Get all the endpoint pods
  command: >-
    ./kubectl --kubeconfig kubeconfig -o=custom-columns=NAME:.metadata.name
    get pods -l name=dind --no-headers
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: dindpods
  tags: "downloadccenv"

- name: Download chaincode container image
  command: >-
    ./kubectl --kubeconfig kubeconfig exec {{ item }} --
    docker pull {{ fabric.repo.url }}fabric-ccenv:{{ fabric.baseimage_tag }}
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ dindpods.stdout_lines }}"
  when: allpeers | length > 0
  tags: "downloadccenv"

- name: Start channel operations
  command: "./kubectl --kubeconfig kubeconfig apply -f ../run/cli-k8s.yaml"
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "channeloperation"
  when: (allorderers | length > 0) and (allpeers | length > 0)

- name: Wait for channel operation pod to complete
  command: >-
    ./kubectl --kubeconfig kubeconfig -o=custom-columns=STATUS:.status.phase
    get pods -l k8s-app=fabriccli --no-headers --field-selector=status.phase=Succeeded
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: podstatus.stdout_lines | length == 1
  when: (allorderers | length > 0) and (allpeers | length > 0)
  retries: 50
  delay: 5
