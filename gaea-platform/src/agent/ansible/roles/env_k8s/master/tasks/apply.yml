---
- name: Setup public and private IP variables
  set_fact:
    fabricroot: "/opt/fabric"
    public_ip: "{{ ansible_host }}"
    private_ip: "{{ hostvars[ansible_host].private_ip }}"
    node_name: "{{ hostvars[ansible_host].inter_name }}"
    service_path: "/lib/systemd/system/"
    etcd_ip: "{{ groups['etcdnodes'] | random }}"
    etcd_cluster: ""

- name: Ensure binary directory exists
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  with_items:
    - "{{ fabricroot }}/bin"
    - "/etc/kubernetes/secrets/certs"
    - "/etc/kubernetes/secrets/users"

- name: Create etcd cluster endpoint parameter
  set_fact:
    etcd_cluster: "{{ etcd_cluster }} http://{{ hostvars[item].private_ip }}:2379"
  with_items: "{{ groups['etcdnodes'] }}"

- name: Make the endpoint the right format
  set_fact:
    etcd_cluster: "{{ etcd_cluster | trim | replace(' ', ',') }}"

- name: List all k8s binaries on the node
  stat: "path={{ fabricroot }}/bin/{{ item }}"
  with_items:
    - kubelet
    - kubectl
    - kube-proxy
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  register: k8s_binaries

- name: Download k8s binary files if they are not already on the master node
  get_url:
    url: "{{ cluster.k8s_repo }}{{ item.item }}"
    dest: "{{ fabricroot }}/bin/{{ item.item }}"
    mode: "0555"
  with_items: "{{ k8s_binaries.results }}"
  when: item.stat.exists == false
  no_log: True

- name: Reset etcd
  uri:
    url: "http://{{ etcd_ip }}:2379/v2/keys/{{ item }}?recursive=true"
    method: DELETE
    status_code: 200,202,204,404
  with_items:
    - registry

- name: Setup service parameters
  set_fact:
    apiserver_params: >-
      --etcd-servers={{ etcd_cluster }}
      --service-cluster-ip-range={{ cluster.service_ip_range }}
      --advertise-address={{ public_ip }}
      --bind-address={{ private_ip }}
      --insecure-bind-address={{ private_ip }}
      --allow-privileged=true
      --tls-cert-file=/etc/kubernetes/secrets/certs/server.crt
      --tls-private-key-file=/etc/kubernetes/secrets/certs/server.key
      --token-auth-file=/etc/kubernetes/secrets/users/token.csv
      --admission-control=NamespaceLifecycle,LimitRanger,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
    controller_params: >-
      --master=http://{{ private_ip }}:8080
      --cluster-cidr={{ cluster.container_network.Network }}
      --cluster-name=k8s
    scheduler_params: >-
      --master=http://{{ private_ip }}:8080

- name: Upload certificats
  copy:
    src: "{{ playbook_dir }}/../../secrets/{{ item }}"
    dest: "/etc/kubernetes/secrets/{{ item }}"
    mode: 0644
  with_items:
    - certs/server.crt
    - certs/server.key
    - users/token.csv

- name: Configure the services
  template:
    src: "{{ playbook_dir }}/../env_k8s/worker/templates/k8s.conf.j2"
    dest: "/etc/kubernetes/{{ item.name }}"
    mode: 0644
  with_items:
    - { name: "kube-apiserver", value: "{{ apiserver_params }}" }
    - { name: "kube-controller-manager", value: "{{ controller_params }}" }
    - { name: "kube-scheduler", value: "{{ scheduler_params }}"}

- name: Setup services for master node
  template:
    src: "{{ playbook_dir }}/../env_k8s/worker/templates/k8s.service.j2"
    dest: "{{ service_path }}{{ item }}.service"
    mode: 0644
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Enable and start the services
  service:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- set_fact:
    k8stokens: "{{ k8stokens | default([]) + [{'token': item.split(',')[0], 'name': item.split(',')[1]}] }}"
  with_lines: cat "{{ playbook_dir }}/../../secrets/users/token.csv"
  tags: "kubeconfig"

- name: Generate kubeconfig
  template:
    src: "{{ playbook_dir }}/../env_k8s/master/templates/kubeconfig.j2"
    dest: "/etc/kubernetes/kubeconfig"
  tags: "kubeconfig"

- name: Get the kubeconfig to the ansible controller
  fetch:
    src: "/etc/kubernetes/kubeconfig"
    dest: "{{ playbook_dir }}/../../vars/kubeconfig"
    flat: yes
  tags: "kubeconfig"
